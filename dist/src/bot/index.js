import { Markup, Telegraf } from "telegraf";
import { commands, info, print } from "../utility/const.js";
import { message } from "telegraf/filters";
export let chats = [
    {
        userId: "0",
        chatId: -892072144,
        lastAction: 1
    },
    {
        userId: "0",
        chatId: -884398668,
        lastAction: 0
    },
    {
        userId: "0",
        chatId: -997579116,
        lastAction: 2
    }
];
export const dataMsgs = [];
export const changeChats = (newChat) => {
    chats = chats.map((chat) => chat.chatId === newChat.chatId ? newChat : chat);
};
export const bot = new Telegraf(process.env.TELEGRAM);
//app.use(await bot.createWebhook({ domain: "webhookDomain" }));
bot.start((ctx) => ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"));
bot.help((ctx) => ctx.reply(commands));
bot.command("menu", async (ctx) => {
    try {
        await ctx.replyWithHTML("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", Markup.inlineKeyboard([
            [
                Markup.button.callback("üîç –ü–æ–∏—Å–∫", "search"),
                Markup.button.callback("‚ò∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
            ],
            [Markup.button.callback("üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info")] // Row2 with 2 buttons
        ]));
    }
    catch (e) {
        print(e);
    }
});
bot.action("info", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.replyWithHTML(info);
    }
    catch (e) {
        print(e);
    }
});
bot.action("settings", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        if (ctx.from.username !== process.env.USER_NAME)
            await ctx.replyWithHTML("<b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>");
        else if (ctx.chat.id > 0)
            await ctx.replyWithHTML("<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!</b>");
        else if (chats.map(({ chatId }) => chatId).indexOf(ctx.chat.id) >= 0)
            await ctx.replyWithHTML("<b>–î–∞–Ω–Ω—ã–π —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω</b>", Markup.inlineKeyboard([
                [Markup.button.callback("‚õîÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å", "stopChat")]
            ]));
        else
            await ctx.replyWithHTML("<b>–î–∞–Ω–Ω—ã–π —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω</b>", Markup.inlineKeyboard([
                [Markup.button.callback("üöÄ –í–∫–ª—é—á–∏—Ç—å", "startChat")]
                //      [Markup.button.callback("–û—Ç–º–µ–Ω–∞", "info")]
            ]));
    }
    catch (e) {
        print(e);
    }
});
bot.action("startChat", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        chats = [...chats, { userId: "0", lastAction: 0, chatId: ctx.chat.id }];
        await ctx.replyWithHTML("<b>–£—Å–ø–µ—à–Ω–æ!</b>");
    }
    catch (e) {
        print(e);
    }
});
bot.action("stopChat", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        chats = chats.filter(({ chatId }) => chatId !== ctx.chat.id);
        await ctx.replyWithHTML("<b>–£—Å–ø–µ—à–Ω–æ!</b>");
    }
    catch (e) {
        print(e);
    }
});
bot.on(message("text"), (ctx) => {
    if (chats.map(({ chatId }) => chatId).indexOf(ctx.chat.id) >= 0) {
        const userId = chats.find(({ chatId }) => chatId === ctx.chat.id).userId;
        dataMsgs.push({
            userId,
            content: ctx.message.text.substring(2),
            chat: ctx.chat.id
        });
    }
    ctx.reply(ctx.message.text);
});
